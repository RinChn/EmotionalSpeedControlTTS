import os
import sys
import subprocess
import soundfile as sf
import librosa


def check_duration(file_path, min_minutes=10):
    y, sr = librosa.load(file_path, sr=None)
    duration_sec = len(y) / sr
    return duration_sec >= min_minutes * 60, duration_sec


def convert_mp3_to_wav(mp3_path, wav_path):
    command = ["ffmpeg", "-y", "-i", mp3_path, wav_path]
    result = subprocess.run(command, capture_output=True)
    if result.returncode != 0:
        print("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", result.stderr.decode())
        sys.exit(1)


def resample_wav(input_path, output_path):
    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ 44.1 –∫–ì—Ü –∏ –º–æ–Ω–æ
    command = ["ffmpeg", "-y", "-i", input_path, "-ar", "44100", "-ac", "1", output_path]
    result = subprocess.run(command, capture_output=True)
    if result.returncode != 0:
        print("–û—à–∏–±–∫–∞ —Ä–µ—Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏—è:", result.stderr.decode())
        sys.exit(1)


def run_svc_preprocessing(speaker_id):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    subprocess.run([
        "svc", "pre-resample",
        "-i", "so-vits-svc-fork/dataset_raw",
        "-o", "so-vits-svc-fork/dataset"
    ], check=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    subprocess.run(["svc", "pre-config", "--speaker", speaker_id], check=True)

    # Hubert-—ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    subprocess.run(["svc", "pre-hubert"], check=True)


def train_model():
    subprocess.run(["svc", "train"], check=True)


def main(mp3_path, speaker_name):
    temp_raw = "temp_original.wav"
    temp_clean = "temp_ref_voice.wav"

    print("üì• –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è mp3 ‚Üí wav...")
    convert_mp3_to_wav(mp3_path, temp_raw)

    print("‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    ok, duration = check_duration(temp_raw)
    if not ok:
        print(f"–û—à–∏–±–∫–∞: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration / 60:.2f} –º–∏–Ω < 10 –º–∏–Ω")
        sys.exit(2)

    print("üîÅ –†–µ—Å–µ–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 44.1 –∫–ì—Ü, –º–æ–Ω–æ...")
    resample_wav(temp_raw, temp_clean)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    speaker_id = speaker_name.replace(" ", "_")
    ref_dir = os.path.join("so-vits-svc-fork", "dataset_raw", speaker_id)
    os.makedirs(ref_dir, exist_ok=True)
    os.replace(temp_clean, os.path.join(ref_dir, "ref_voice.wav"))

    print("‚öôÔ∏è –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–æ–≤ svc: pre-resample, pre-config, pre-hubert...")
    run_svc_preprocessing(speaker_id)

    print("üé§ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    train_model()

    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ logs/")


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python train_new_voice.py path_to_mp3 \"–§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\"")
        sys.exit(1)

    mp3_path = sys.argv[1]
    speaker_name = sys.argv[2]
    main(mp3_path, speaker_name)
